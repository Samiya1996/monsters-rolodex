{"version":3,"sources":["Component/Card/card.component.jsx","Component/card_list/card_list.component.jsx","Component/Search_box/search_box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filteredMonster","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,WAAWC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACzB,6BAAKL,EAAMI,QAAQE,OACnB,8BAAIN,EAAMI,QAAQG,MAAlB,WCDKC,EAAW,SAAAR,GACxB,OAAO,qBAAKC,UAAY,YAAjB,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAA0BA,QAAWA,GAAvBA,EAAQC,UCL5CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACAZ,UAAY,SACZa,KAAO,SACPF,YAAeA,EACfG,SAAYF,MCmCDG,E,kDAnCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAVtC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IALL,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAM/H,WAEE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAASU,EAAjB,EAAiBA,YACXU,EAAkBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBACpG,OAEE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAa,iBACvBC,aAAgBe,KAAKf,aADtB,eAGA,cAAC,EAAD,CAAUJ,SAAYoB,W,GA3BZK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f96b49e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.style.css'\r\nexport const Card = (props) => (\r\n    <div className = 'card-container'>\r\n        <img alt = \"monsters\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email} </p>\r\n    </div>\r\n)","import React from \"react\";\r\n\r\nimport './card_list.style.css';\r\n\r\nimport { Card } from \"../Card/card.component\";\r\n\r\nexport const CardList = props => {\r\nreturn <div className = 'card_list'>\r\n    {props.monsters.map(monster =>(<Card  key = {monster.id} monster = {monster}/>))}\r\n</div>\r\n\r\n}","import React from \"react\";\r\nimport './search_box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input \r\n    className = 'search'\r\n    type = 'search' \r\n    placeholder = {placeholder}\r\n    onChange = {handleChange}\r\n    />\r\n)\r\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport { CardList} from './Component/card_list/card_list.component';\n\nimport { SearchBox } from './Component/Search_box/search_box.component';\n\nclass App extends Component{\n  constructor(){\n    super()\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(user => this.setState({monsters : user}))\n  }\n\n  handleChange = (e)=>{\n    this.setState({searchField : e.target.value})\n  }\n  render(){\n\n    const { monsters,searchField  } = this.state\n    const filteredMonster = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()) )\n    return(\n      \n      <div className=\"App\">\n        <h1>Monster Rolodex </h1>\n        <SearchBox placeholder ='Search Monster'\n         handleChange = {this.handleChange}> </SearchBox>\n       \n        <CardList monsters = {filteredMonster}>\n         </CardList>\n         \n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}